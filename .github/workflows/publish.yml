name: Publish to NPM

on:
  push:
    branches: [main]
    paths: ['package.json']

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous version"
          PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Restore current package.json
          git checkout HEAD -- package.json
          
          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  publish:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: npm test

      - name: Setup Node.js for npm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Check if version is already published
        id: check-published
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          
          echo "Checking if $PACKAGE_NAME@$VERSION is already published..."
          
          if npm view $PACKAGE_NAME@$VERSION version 2>/dev/null; then
            echo "Version $VERSION is already published"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION is not published yet"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check-published.outputs.should-publish == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publishing
        if: steps.check-published.outputs.should-publish == 'false'
        run: echo "Skipping publish - version already exists on npm"

      - name: Create GitHub release
        if: steps.check-published.outputs.should-publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## What's Changed
            
            Version bump to ${{ needs.check-version.outputs.version }}
            
            ðŸ“¦ Published to npm: `npm install -g source-code-tracer`
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.check-version.outputs.version }}...v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false